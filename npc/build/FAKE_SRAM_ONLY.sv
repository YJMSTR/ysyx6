// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FAKE_SRAM_ONLY(	// @[<stdin>:497:10]
  input         clock,	// @[<stdin>:498:11]
                reset,	// @[<stdin>:499:11]
  input  [31:0] io_axi4_araddr,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  input         io_axi4_arvalid,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
                io_axi4_rready,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  input  [31:0] io_axi4_awaddr,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  input         io_axi4_awvalid,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  input  [63:0] io_axi4_wdata,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  input  [7:0]  io_axi4_wstrb,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  input         io_axi4_wvalid,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
                io_axi4_bready,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  output        io_axi4_arready,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  output [63:0] io_axi4_rdata,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
  output        io_axi4_rvalid,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
                io_axi4_awready,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
                io_axi4_wready,	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
                io_axi4_bvalid	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
);

  wire [63:0] _dpic_mem_rdata;	// @[playground/src/FAKE_SRAM_ONLY.scala:22:24]
  reg  [1:0]  casez_tmp;	// @[playground/src/FAKE_SRAM_ONLY.scala:87:19, :89:29]
  reg  [1:0]  r_state;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24]
  reg  [7:0]  delay;	// @[playground/src/FAKE_SRAM_ONLY.scala:18:22]
  reg  [7:0]  delayCounter;	// @[playground/src/FAKE_SRAM_ONLY.scala:19:29]
  wire        delayDone = delayCounter == delay;	// @[playground/src/FAKE_SRAM_ONLY.scala:18:22, :19:29, :20:32]
  reg  [63:0] readData;	// @[playground/src/FAKE_SRAM_ONLY.scala:24:25]
  reg  [31:0] readAddr;	// @[playground/src/FAKE_SRAM_ONLY.scala:25:25]
  reg         rvalidReg;	// @[playground/src/FAKE_SRAM_ONLY.scala:26:26]
  wire        _io_axi4_arready_T = r_state == 2'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :32:30]
  reg  [1:0]  w_state;	// @[playground/src/FAKE_SRAM_ONLY.scala:70:24]
  reg  [31:0] writeAddr;	// @[playground/src/FAKE_SRAM_ONLY.scala:72:26]
  reg  [63:0] writeData;	// @[playground/src/FAKE_SRAM_ONLY.scala:73:26]
  reg  [7:0]  writeStrb;	// @[playground/src/FAKE_SRAM_ONLY.scala:74:26]
  wire        _io_axi4_awready_T = w_state == 2'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :70:24, :77:30]
  wire        _io_axi4_wready_T = w_state == 2'h1;	// @[playground/src/FAKE_SRAM_ONLY.scala:44:17, :70:24, :77:52]
  wire        _dpic_mem_io_valid_T_2 = w_state == 2'h2;	// @[playground/src/FAKE_SRAM_ONLY.scala:53:17, :70:24, :82:30]
  always_comb begin	// @[playground/src/FAKE_SRAM_ONLY.scala:77:{30,52}, :82:30, :87:19, :89:29, :95:28, :102:15]
    casez (w_state)	// @[playground/src/FAKE_SRAM_ONLY.scala:70:24, :77:{30,52}, :82:30, :87:19, :89:29, :95:28, :102:15]
      2'b00:
        casez_tmp = io_axi4_awvalid ? 2'h1 : w_state;	// @[playground/src/FAKE_SRAM_ONLY.scala:44:17, :70:24, :77:{30,52}, :82:30, :87:19, :89:29, :90:17, :95:28, :102:15]
      2'b01:
        casez_tmp = io_axi4_wvalid ? 2'h2 : w_state;	// @[playground/src/FAKE_SRAM_ONLY.scala:53:17, :70:24, :77:{30,52}, :82:30, :87:19, :89:29, :95:28, :98:17, :102:15]
      2'b10:
        casez_tmp = 2'h3;	// @[playground/src/FAKE_SRAM_ONLY.scala:77:{30,52}, :79:29, :82:30, :87:19, :89:29, :95:28, :102:15]
      default:
        casez_tmp = (&w_state) & io_axi4_bready ? 2'h0 : w_state;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :70:24, :77:{30,52}, :79:29, :82:30, :87:19, :89:29, :95:28, :102:15, :105:28, :106:17]
    endcase	// @[playground/src/FAKE_SRAM_ONLY.scala:70:24, :77:{30,52}, :82:30, :87:19, :89:29, :95:28, :102:15]
  end // always_comb
  wire        _GEN = r_state == 2'h2 & io_axi4_rready;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :26:26, :39:19, :53:17, :61:28, :62:19]
  wire        _GEN_0 = r_state == 2'h1;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :39:19, :44:17]
  always @(posedge clock) begin	// @[<stdin>:498:11]
    if (reset) begin	// @[<stdin>:498:11]
      r_state <= 2'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24]
      delay <= 8'h1;	// @[playground/src/FAKE_SRAM_ONLY.scala:18:22]
      delayCounter <= 8'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:19:29]
      readData <= 64'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:24:25]
      readAddr <= 32'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:25:25]
      rvalidReg <= 1'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:26:26]
      w_state <= 2'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :70:24]
      writeAddr <= 32'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:25:25, :72:26]
      writeData <= 64'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:24:25, :73:26]
      writeStrb <= 8'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:19:29, :74:26]
    end
    else begin	// @[<stdin>:498:11]
      if (_io_axi4_arready_T) begin	// @[playground/src/FAKE_SRAM_ONLY.scala:32:30]
        if (io_axi4_arvalid) begin	// @[playground/src/FAKE_SRAM_ONLY.scala:7:14]
          r_state <= 2'h1;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :44:17]
          delayCounter <= 8'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:19:29]
        end
        readData <= 64'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:24:25]
      end
      else begin	// @[playground/src/FAKE_SRAM_ONLY.scala:32:30]
        if (_GEN_0) begin	// @[playground/src/FAKE_SRAM_ONLY.scala:39:19]
          if (delayDone) begin	// @[playground/src/FAKE_SRAM_ONLY.scala:20:32]
            r_state <= 2'h2;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :53:17]
            readData <= _dpic_mem_rdata;	// @[playground/src/FAKE_SRAM_ONLY.scala:22:24, :24:25]
          end
          else	// @[playground/src/FAKE_SRAM_ONLY.scala:20:32]
            readData <= 64'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:24:25]
          rvalidReg <= delayDone | rvalidReg;	// @[playground/src/FAKE_SRAM_ONLY.scala:20:32, :26:26, :50:22, :51:19]
        end
        else begin	// @[playground/src/FAKE_SRAM_ONLY.scala:39:19]
          if (_GEN)	// @[playground/src/FAKE_SRAM_ONLY.scala:26:26, :39:19, :61:28, :62:19]
            r_state <= 2'h0;	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24]
          rvalidReg <= ~_GEN & rvalidReg;	// @[playground/src/FAKE_SRAM_ONLY.scala:26:26, :39:19, :61:28, :62:19]
        end
        if (~_GEN_0 | delayDone) begin	// @[playground/src/FAKE_SRAM_ONLY.scala:19:29, :20:32, :39:19, :50:22]
        end
        else	// @[playground/src/FAKE_SRAM_ONLY.scala:19:29, :39:19, :50:22]
          delayCounter <= delayCounter + 8'h1;	// @[playground/src/FAKE_SRAM_ONLY.scala:18:22, :19:29, :56:38]
      end
      if (_io_axi4_arready_T & io_axi4_arvalid) begin	// @[playground/src/FAKE_SRAM_ONLY.scala:25:25, :32:30, :39:19, :42:28, :43:18]
        delay <= 8'h64;	// @[playground/src/FAKE_SRAM_ONLY.scala:18:22, :46:15]
        readAddr <= io_axi4_araddr;	// @[playground/src/FAKE_SRAM_ONLY.scala:25:25]
      end
      w_state <= casez_tmp;	// @[playground/src/FAKE_SRAM_ONLY.scala:70:24, :87:19, :89:29]
      if (_io_axi4_awready_T & io_axi4_awvalid)	// @[playground/src/FAKE_SRAM_ONLY.scala:72:26, :77:30, :87:19, :89:29, :91:19]
        writeAddr <= io_axi4_awaddr;	// @[playground/src/FAKE_SRAM_ONLY.scala:72:26]
      if (_io_axi4_awready_T | ~(_io_axi4_wready_T & io_axi4_wvalid)) begin	// @[playground/src/FAKE_SRAM_ONLY.scala:73:26, :74:26, :77:{30,52}, :87:19, :95:28, :96:19]
      end
      else begin	// @[playground/src/FAKE_SRAM_ONLY.scala:74:26, :87:19]
        writeData <= io_axi4_wdata;	// @[playground/src/FAKE_SRAM_ONLY.scala:73:26]
        writeStrb <= io_axi4_wstrb;	// @[playground/src/FAKE_SRAM_ONLY.scala:74:26]
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:497:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:497:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:497:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];	// @[<stdin>:497:10]
    initial begin	// @[<stdin>:497:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:497:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:497:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:497:10]
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// @[<stdin>:497:10]
        end	// @[<stdin>:497:10]
        r_state = _RANDOM[3'h0][1:0];	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:15:24]
        delay = _RANDOM[3'h0][9:2];	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:15:24, :18:22]
        delayCounter = _RANDOM[3'h0][17:10];	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:15:24, :19:29]
        readData = {_RANDOM[3'h0][31:18], _RANDOM[3'h1], _RANDOM[3'h2][17:0]};	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:15:24, :24:25]
        readAddr = {_RANDOM[3'h2][31:18], _RANDOM[3'h3][17:0]};	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:24:25, :25:25]
        rvalidReg = _RANDOM[3'h3][18];	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:25:25, :26:26]
        w_state = _RANDOM[3'h3][20:19];	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:25:25, :70:24]
        writeAddr = {_RANDOM[3'h3][31:21], _RANDOM[3'h4][20:0]};	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:25:25, :72:26]
        writeData = {_RANDOM[3'h4][31:21], _RANDOM[3'h5], _RANDOM[3'h6][20:0]};	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:72:26, :73:26]
        writeStrb = _RANDOM[3'h6][28:21];	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:73:26, :74:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:497:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:497:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DPIC_MEM dpic_mem (	// @[playground/src/FAKE_SRAM_ONLY.scala:22:24]
    .valid (delayDone & r_state == 2'h1 | _dpic_mem_io_valid_T_2),	// @[playground/src/FAKE_SRAM_ONLY.scala:15:24, :20:32, :44:17, :82:30, :111:{36,46,58}]
    .wen   (_dpic_mem_io_valid_T_2),	// @[playground/src/FAKE_SRAM_ONLY.scala:82:30]
    .raddr (readAddr),	// @[playground/src/FAKE_SRAM_ONLY.scala:25:25]
    .waddr (writeAddr),	// @[playground/src/FAKE_SRAM_ONLY.scala:72:26]
    .wdata (writeData),	// @[playground/src/FAKE_SRAM_ONLY.scala:73:26]
    .wmask (writeStrb),	// @[playground/src/FAKE_SRAM_ONLY.scala:74:26]
    .clk   (clock),
    .rdata (_dpic_mem_rdata)
  );
  assign io_axi4_arready = _io_axi4_arready_T;	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:32:30]
  assign io_axi4_rdata = readData;	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:24:25]
  assign io_axi4_rvalid = rvalidReg;	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:26:26]
  assign io_axi4_awready = _io_axi4_awready_T | _io_axi4_wready_T;	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:77:{30,41,52}]
  assign io_axi4_wready = _io_axi4_wready_T;	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:77:52]
  assign io_axi4_bvalid = &w_state;	// @[<stdin>:497:10, playground/src/FAKE_SRAM_ONLY.scala:70:24, :79:29]
endmodule

