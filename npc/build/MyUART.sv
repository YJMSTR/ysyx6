// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MyUART(	// @[<stdin>:1028:10]
  input         clock,	// @[<stdin>:1029:11]
                reset,	// @[<stdin>:1030:11]
                io_axi4_awvalid,	// @[playground/src/UART.scala:6:14]
  input  [63:0] io_axi4_wdata,	// @[playground/src/UART.scala:6:14]
  input         io_axi4_wvalid,	// @[playground/src/UART.scala:6:14]
                io_axi4_bready,	// @[playground/src/UART.scala:6:14]
  output        io_axi4_awready,	// @[playground/src/UART.scala:6:14]
                io_axi4_wready,	// @[playground/src/UART.scala:6:14]
                io_axi4_bvalid	// @[playground/src/UART.scala:6:14]
);

  reg  [1:0]  w_state;	// @[playground/src/UART.scala:12:24]
  reg  [63:0] writeData;	// @[playground/src/UART.scala:15:26]
  wire        _io_axi4_wready_T = w_state == 2'h1;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24, :26:52]
  wire        _GEN = w_state == 2'h2;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24, :32:19]
  `ifndef SYNTHESIS	// @[playground/src/UART.scala:50:13]
    always @(posedge clock) begin	// @[playground/src/UART.scala:50:13]
      if ((`PRINTF_COND_) & (|w_state) & ~_io_axi4_wready_T & _GEN & ~reset)	// @[playground/src/UART.scala:12:24, :26:{30,52}, :32:19, :50:13]
        $fwrite(32'h80000002, "%c", writeData[7:0]);	// @[playground/src/UART.scala:15:26, :50:{13,29}]
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin	// @[<stdin>:1029:11]
    if (reset) begin	// @[<stdin>:1029:11]
      w_state <= 2'h0;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24]
      writeData <= 64'h0;	// @[playground/src/UART.scala:15:26]
    end
    else begin	// @[<stdin>:1029:11]
      if (|w_state) begin	// @[playground/src/UART.scala:12:24, :26:30]
        if (_io_axi4_wready_T) begin	// @[playground/src/UART.scala:26:52]
          if (io_axi4_wvalid)	// @[playground/src/UART.scala:6:14]
            w_state <= 2'h2;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24]
        end
        else if (_GEN)	// @[playground/src/UART.scala:32:19]
          w_state <= 2'h3;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24]
        else if ((&w_state) & io_axi4_bready)	// @[playground/src/UART.scala:12:24, :28:29, :32:19, :54:28, :55:17]
          w_state <= 2'h0;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24]
      end
      else if (io_axi4_awvalid)	// @[playground/src/UART.scala:6:14]
        w_state <= 2'h1;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24]
      if ((|w_state) & _io_axi4_wready_T & io_axi4_wvalid)	// @[playground/src/UART.scala:12:24, :15:26, :26:{30,52}, :32:19]
        writeData <= io_axi4_wdata;	// @[playground/src/UART.scala:15:26]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:1028:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:1028:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:1028:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];	// @[<stdin>:1028:10]
    initial begin	// @[<stdin>:1028:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:1028:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:1028:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:1028:10]
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// @[<stdin>:1028:10]
        end	// @[<stdin>:1028:10]
        w_state = _RANDOM[2'h0][1:0];	// @[<stdin>:1028:10, playground/src/UART.scala:12:24]
        writeData = {_RANDOM[2'h1][31:2], _RANDOM[2'h2], _RANDOM[2'h3][1:0]};	// @[<stdin>:1028:10, playground/src/UART.scala:15:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:1028:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:1028:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_axi4_awready = ~(|w_state) | _io_axi4_wready_T;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24, :26:{30,41,52}]
  assign io_axi4_wready = _io_axi4_wready_T;	// @[<stdin>:1028:10, playground/src/UART.scala:26:52]
  assign io_axi4_bvalid = &w_state;	// @[<stdin>:1028:10, playground/src/UART.scala:12:24, :28:29]
endmodule

