// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MyCLINT(	// @[<stdin>:1155:10]
  input         clock,	// @[<stdin>:1156:11]
                reset,	// @[<stdin>:1157:11]
  input  [31:0] io_axi4_araddr,	// @[playground/src/CLINT.scala:6:14]
  input         io_axi4_arvalid,	// @[playground/src/CLINT.scala:6:14]
                io_axi4_rready,	// @[playground/src/CLINT.scala:6:14]
  output        io_axi4_arready,	// @[playground/src/CLINT.scala:6:14]
  output [63:0] io_axi4_rdata,	// @[playground/src/CLINT.scala:6:14]
  output        io_axi4_rvalid	// @[playground/src/CLINT.scala:6:14]
);

  reg         r_state;	// @[playground/src/CLINT.scala:14:24]
  reg  [63:0] mtime_csr;	// @[playground/src/CLINT.scala:16:26]
  reg  [31:0] rdata;	// @[playground/src/CLINT.scala:18:22]
  wire        _GEN = ~r_state & io_axi4_arvalid;	// @[playground/src/CLINT.scala:14:24, :26:30, :33:29]
  wire        _rdata_T = io_axi4_araddr == 32'hA0000048;	// @[playground/src/CLINT.scala:34:31]
  `ifndef SYNTHESIS	// @[playground/src/CLINT.scala:34:15]
    always @(posedge clock) begin	// @[playground/src/CLINT.scala:34:15]
      if (_GEN & ~reset & ~(_rdata_T | io_axi4_araddr == 32'hA000004C)) begin	// @[playground/src/CLINT.scala:33:29, :34:{15,31,46,64}]
        if (`ASSERT_VERBOSE_COND_)	// @[playground/src/CLINT.scala:34:15]
          $error("Assertion failed\n    at CLINT.scala:34 assert(io.axi4.araddr === RTC_ADDR.U || io.axi4.araddr === (RTC_ADDR+4).U)\n");	// @[playground/src/CLINT.scala:34:15]
        if (`STOP_COND_)	// @[playground/src/CLINT.scala:34:15]
          $fatal;	// @[playground/src/CLINT.scala:34:15]
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin	// @[<stdin>:1156:11]
    if (reset) begin	// @[<stdin>:1156:11]
      r_state <= 1'h0;	// @[playground/src/CLINT.scala:14:24]
      mtime_csr <= 64'h0;	// @[playground/src/CLINT.scala:16:26]
      rdata <= 32'h0;	// @[playground/src/CLINT.scala:18:22]
    end
    else begin	// @[<stdin>:1156:11]
      if (r_state)	// @[playground/src/CLINT.scala:14:24]
        r_state <= ~(r_state & io_axi4_rready) & r_state;	// @[playground/src/CLINT.scala:14:24, :31:19, :40:28, :41:17]
      else	// @[playground/src/CLINT.scala:14:24]
        r_state <= io_axi4_arvalid | r_state;	// @[playground/src/CLINT.scala:14:24, :33:29, :35:17]
      mtime_csr <= mtime_csr + 64'h1;	// @[playground/src/CLINT.scala:16:26, :17:26]
      if (_GEN) begin	// @[playground/src/CLINT.scala:33:29]
        if (_rdata_T)	// @[playground/src/CLINT.scala:34:31]
          rdata <= mtime_csr[31:0];	// @[playground/src/CLINT.scala:16:26, :18:22, :36:62]
        else	// @[playground/src/CLINT.scala:34:31]
          rdata <= mtime_csr[63:32];	// @[playground/src/CLINT.scala:16:26, :18:22, :36:80]
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:1155:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:1155:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:1155:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];	// @[<stdin>:1155:10]
    initial begin	// @[<stdin>:1155:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:1155:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:1155:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:1155:10]
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// @[<stdin>:1155:10]
        end	// @[<stdin>:1155:10]
        r_state = _RANDOM[2'h0][0];	// @[<stdin>:1155:10, playground/src/CLINT.scala:14:24]
        mtime_csr = {_RANDOM[2'h0][31:1], _RANDOM[2'h1], _RANDOM[2'h2][0]};	// @[<stdin>:1155:10, playground/src/CLINT.scala:14:24, :16:26]
        rdata = {_RANDOM[2'h2][31:1], _RANDOM[2'h3][0]};	// @[<stdin>:1155:10, playground/src/CLINT.scala:16:26, :18:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:1155:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:1155:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_axi4_arready = ~r_state;	// @[<stdin>:1155:10, playground/src/CLINT.scala:14:24, :26:30]
  assign io_axi4_rdata = {32'h0, rdata};	// @[<stdin>:1155:10, playground/src/CLINT.scala:18:22, :28:17]
  assign io_axi4_rvalid = r_state;	// @[<stdin>:1155:10, playground/src/CLINT.scala:14:24]
endmodule

