// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ICache(	// @[<stdin>:1299:10]
  input         clock,	// @[<stdin>:1300:11]
                reset,	// @[<stdin>:1301:11]
  input  [63:0] io_io_raddr,	// @[playground/src/Cache.scala:34:14]
  input         io_io_raddr_valid,	// @[playground/src/Cache.scala:34:14]
                io_io_rdata_ready,	// @[playground/src/Cache.scala:34:14]
                io_axi4_arready,	// @[playground/src/Cache.scala:34:14]
  input  [63:0] io_axi4_rdata,	// @[playground/src/Cache.scala:34:14]
  input  [1:0]  io_axi4_rresp,	// @[playground/src/Cache.scala:34:14]
  input         io_axi4_rvalid,	// @[playground/src/Cache.scala:34:14]
                io_bus_ac,	// @[playground/src/Cache.scala:34:14]
                io_stall,	// @[playground/src/Cache.scala:34:14]
  output        io_io_raddr_ready,	// @[playground/src/Cache.scala:34:14]
  output [31:0] io_io_rdata,	// @[playground/src/Cache.scala:34:14]
  output        io_io_rdata_valid,	// @[playground/src/Cache.scala:34:14]
  output [31:0] io_axi4_araddr,	// @[playground/src/Cache.scala:34:14]
  output        io_axi4_arvalid,	// @[playground/src/Cache.scala:34:14]
                io_axi4_rready,	// @[playground/src/Cache.scala:34:14]
                io_bus_reqr	// @[playground/src/Cache.scala:34:14]
);

  wire        _cache_valid_ext_R0_data;	// @[playground/src/Cache.scala:69:32]
  wire [60:0] _cache_tag_ext_R0_data;	// @[playground/src/Cache.scala:68:30]
  wire [63:0] _cache_data_ext_R0_data;	// @[playground/src/Cache.scala:53:31]
  reg  [63:0] data_cacheline_reg;	// @[playground/src/Cache.scala:73:35]
  reg         reqr_reg;	// @[playground/src/Cache.scala:75:25]
  reg  [2:0]  r_state;	// @[playground/src/Cache.scala:98:24]
  reg  [63:0] axi_reg_readAddr;	// @[playground/src/Cache.scala:100:33]
  wire        _io_io_rdata_valid_T = r_state == 3'h2;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24, :122:32]
  wire        _io_axi4_arvalid_T = r_state == 3'h3;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24, :129:30]
  wire        _io_axi4_rready_T = r_state == 3'h4;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24, :130:29]
  wire        _GEN = r_state == 3'h1;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24, :141:19]
  wire        _GEN_0 = io_bus_ac & io_axi4_rvalid;	// @[playground/src/Cache.scala:182:22]
  wire        _GEN_1 = _io_io_rdata_valid_T | _io_axi4_arvalid_T;	// @[playground/src/Cache.scala:73:35, :122:32, :129:30, :141:19]
  wire        _GEN_2 = ~(~(|r_state) | _GEN | _GEN_1) & _io_axi4_rready_T & _GEN_0;	// @[playground/src/Cache.scala:53:31, :73:35, :98:24, :121:32, :130:29, :141:19, :182:22]
  `ifndef SYNTHESIS	// @[playground/src/Cache.scala:192:17]
    always @(posedge clock) begin	// @[playground/src/Cache.scala:192:17]
      if ((`PRINTF_COND_) & (|r_state) & ~_GEN & ~_io_io_rdata_valid_T
          & ~_io_axi4_arvalid_T & _io_axi4_rready_T & _GEN_0 & (|io_axi4_rresp) & ~reset)	// @[playground/src/Cache.scala:98:24, :121:32, :122:32, :129:30, :130:29, :141:19, :182:22, :191:29, :192:17]
        $fwrite(32'h80000002, "icache rresp = %x\n", io_axi4_rresp);	// @[playground/src/Cache.scala:192:17]
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_3 = _io_axi4_rready_T & _GEN_0;	// @[playground/src/Cache.scala:98:24, :130:29, :141:19, :182:{22,40}, :183:17]
  wire        _GEN_4 = _GEN_1 | ~_GEN_3;	// @[playground/src/Cache.scala:73:35, :98:24, :141:19, :182:40, :183:17]
  wire        hit =
    _cache_valid_ext_R0_data & _cache_tag_ext_R0_data == io_io_raddr[63:3];	// @[playground/src/Cache.scala:61:40, :68:30, :69:32, :139:{46,80}]
  always @(posedge clock) begin	// @[<stdin>:1300:11]
    if (reset) begin	// @[<stdin>:1300:11]
      data_cacheline_reg <= 64'h0;	// @[playground/src/Cache.scala:73:35]
      reqr_reg <= 1'h0;	// @[<stdin>:1299:10, playground/src/Cache.scala:75:25]
      r_state <= 3'h0;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24]
      axi_reg_readAddr <= 64'h0;	// @[playground/src/Cache.scala:73:35, :100:33]
    end
    else begin	// @[<stdin>:1300:11]
      if (|r_state) begin	// @[playground/src/Cache.scala:98:24, :121:32]
        if (_GEN) begin	// @[playground/src/Cache.scala:141:19]
          if (hit)	// @[playground/src/Cache.scala:139:46]
            data_cacheline_reg <= _cache_data_ext_R0_data;	// @[playground/src/Cache.scala:53:31, :73:35]
          reqr_reg <= ~hit | reqr_reg;	// @[playground/src/Cache.scala:75:25, :139:46, :149:18, :155:17, :160:17, :162:18]
          r_state <= {2'h1, ~hit};	// @[playground/src/Cache.scala:98:24, :139:46, :149:18, :155:17, :160:17]
        end
        else begin	// @[playground/src/Cache.scala:141:19]
          if (_GEN_4) begin	// @[playground/src/Cache.scala:73:35, :141:19]
          end
          else	// @[playground/src/Cache.scala:73:35, :141:19]
            data_cacheline_reg <= io_axi4_rdata;	// @[playground/src/Cache.scala:73:35]
          reqr_reg <= _GEN_4 & reqr_reg;	// @[playground/src/Cache.scala:73:35, :75:25, :141:19]
          if (_io_io_rdata_valid_T) begin	// @[playground/src/Cache.scala:122:32]
            if (io_io_rdata_ready & ~io_stall)	// @[playground/src/Cache.scala:143:58, :169:31]
              r_state <= 3'h0;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24]
          end
          else if (_io_axi4_arvalid_T) begin	// @[playground/src/Cache.scala:129:30]
            if (io_bus_ac & io_axi4_arready)	// @[playground/src/Cache.scala:175:23]
              r_state <= 3'h4;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24]
          end
          else if (_GEN_3)	// @[playground/src/Cache.scala:98:24, :141:19, :182:40, :183:17]
            r_state <= 3'h2;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24]
        end
      end
      else if (io_io_raddr_valid & ~io_stall)	// @[playground/src/Cache.scala:143:{55,58}]
        r_state <= 3'h1;	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24]
      if (~(|r_state) | ~_GEN | hit) begin	// @[playground/src/Cache.scala:98:24, :100:33, :121:32, :139:46, :141:19, :149:18]
      end
      else	// @[playground/src/Cache.scala:100:33, :141:19]
        axi_reg_readAddr <= {io_io_raddr[63:3], 3'h0};	// @[<stdin>:1299:10, playground/src/Cache.scala:61:40, :100:33, :161:26]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:1299:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:1299:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:1299:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];	// @[<stdin>:1299:10]
    initial begin	// @[<stdin>:1299:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:1299:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:1299:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:1299:10]
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// @[<stdin>:1299:10]
        end	// @[<stdin>:1299:10]
        data_cacheline_reg = {_RANDOM[3'h0], _RANDOM[3'h1]};	// @[<stdin>:1299:10, playground/src/Cache.scala:73:35]
        reqr_reg = _RANDOM[3'h2][0];	// @[<stdin>:1299:10, playground/src/Cache.scala:75:25]
        r_state = _RANDOM[3'h2][4:2];	// @[<stdin>:1299:10, playground/src/Cache.scala:75:25, :98:24]
        axi_reg_readAddr = {_RANDOM[3'h2][31:5], _RANDOM[3'h3], _RANDOM[3'h4][4:0]};	// @[<stdin>:1299:10, playground/src/Cache.scala:75:25, :100:33]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:1299:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:1299:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  cache_data_combMem cache_data_ext (	// @[playground/src/Cache.scala:53:31]
    .R0_addr (io_io_raddr[11:3]),	// @[playground/src/Cache.scala:119:46]
    .R0_en   (1'h1),	// @[<stdin>:1299:10]
    .R0_clk  (clock),
    .W0_addr (io_io_raddr[11:3]),	// @[playground/src/Cache.scala:119:46]
    .W0_en   (_GEN_2),	// @[playground/src/Cache.scala:53:31, :141:19]
    .W0_clk  (clock),
    .W0_data (io_axi4_rdata),
    .R0_data (_cache_data_ext_R0_data)
  );
  cache_tag_combMem cache_tag_ext (	// @[playground/src/Cache.scala:68:30]
    .R0_addr (io_io_raddr[11:3]),	// @[playground/src/Cache.scala:119:46]
    .R0_en   (1'h1),	// @[<stdin>:1299:10]
    .R0_clk  (clock),
    .W0_addr (io_io_raddr[11:3]),	// @[playground/src/Cache.scala:119:46]
    .W0_en   (_GEN_2),	// @[playground/src/Cache.scala:53:31, :141:19]
    .W0_clk  (clock),
    .W0_data (io_io_raddr[63:3]),	// @[playground/src/Cache.scala:61:40]
    .R0_data (_cache_tag_ext_R0_data)
  );
  cache_valid_combMem cache_valid_ext (	// @[playground/src/Cache.scala:69:32]
    .R0_addr (io_io_raddr[11:3]),	// @[playground/src/Cache.scala:119:46]
    .R0_en   (1'h1),	// @[<stdin>:1299:10]
    .R0_clk  (clock),
    .W0_addr (io_io_raddr[11:3]),	// @[playground/src/Cache.scala:119:46]
    .W0_en   (_GEN_2),	// @[playground/src/Cache.scala:53:31, :141:19]
    .W0_clk  (clock),
    .W0_data (1'h1),	// @[<stdin>:1299:10]
    .R0_data (_cache_valid_ext_R0_data)
  );
  assign io_io_raddr_ready = ~(|r_state);	// @[<stdin>:1299:10, playground/src/Cache.scala:98:24, :121:32]
  assign io_io_rdata =
    io_io_raddr[2] ? data_cacheline_reg[63:32] : data_cacheline_reg[31:0];	// @[<stdin>:1299:10, playground/src/Cache.scala:73:35, :93:33, :123:{15,62,89}, :141:19]
  assign io_io_rdata_valid = _io_io_rdata_valid_T;	// @[<stdin>:1299:10, playground/src/Cache.scala:122:32]
  assign io_axi4_araddr = axi_reg_readAddr[31:0];	// @[<stdin>:1299:10, playground/src/Cache.scala:100:33, :131:18]
  assign io_axi4_arvalid = _io_axi4_arvalid_T;	// @[<stdin>:1299:10, playground/src/Cache.scala:129:30]
  assign io_axi4_rready = _io_axi4_rready_T;	// @[<stdin>:1299:10, playground/src/Cache.scala:130:29]
  assign io_bus_reqr = reqr_reg;	// @[<stdin>:1299:10, playground/src/Cache.scala:75:25]
endmodule

