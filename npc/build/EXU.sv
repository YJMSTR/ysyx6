// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module EXU(	// @[<stdin>:2593:10]
  input  [31:0] io_inst,	// @[playground/src/EXU.scala:10:14]
  input  [63:0] io_rs1v,	// @[playground/src/EXU.scala:10:14]
                io_rs2v,	// @[playground/src/EXU.scala:10:14]
                io_csrrv,	// @[playground/src/EXU.scala:10:14]
                io_pc,	// @[playground/src/EXU.scala:10:14]
  input  [2:0]  io_asel,	// @[playground/src/EXU.scala:10:14]
                io_bsel,	// @[playground/src/EXU.scala:10:14]
  input  [4:0]  io_alu_op,	// @[playground/src/EXU.scala:10:14]
  input  [63:0] io_imm,	// @[playground/src/EXU.scala:10:14]
  input         io_isword,	// @[playground/src/EXU.scala:10:14]
  output [63:0] io_res	// @[playground/src/EXU.scala:10:14]
);

  reg  [63:0]  casez_tmp;	// @[playground/src/EXU.scala:27:47]
  reg  [63:0]  casez_tmp_0;	// @[playground/src/EXU.scala:35:47]
  reg  [63:0]  casez_tmp_1;	// @[playground/src/EXU.scala:53:48]
  always_comb begin	// @[playground/src/EXU.scala:27:47]
    casez (io_asel)	// @[playground/src/EXU.scala:27:47]
      3'b000:
        casez_tmp = 64'h0;	// @[playground/src/EXU.scala:27:47]
      3'b001:
        casez_tmp = io_rs1v;	// @[playground/src/EXU.scala:27:47]
      3'b010:
        casez_tmp = io_rs2v;	// @[playground/src/EXU.scala:27:47]
      3'b011:
        casez_tmp = io_pc;	// @[playground/src/EXU.scala:27:47]
      3'b100:
        casez_tmp = io_imm;	// @[playground/src/EXU.scala:27:47]
      3'b101:
        casez_tmp = 64'h0;	// @[playground/src/EXU.scala:27:47]
      3'b110:
        casez_tmp = io_csrrv;	// @[playground/src/EXU.scala:27:47]
      default:
        casez_tmp = 64'h0;	// @[playground/src/EXU.scala:27:47]
    endcase	// @[playground/src/EXU.scala:27:47]
  end // always_comb
  always_comb begin	// @[playground/src/EXU.scala:35:47]
    casez (io_bsel)	// @[playground/src/EXU.scala:35:47]
      3'b000:
        casez_tmp_0 = 64'h0;	// @[playground/src/EXU.scala:27:47, :35:47]
      3'b001:
        casez_tmp_0 = io_rs1v;	// @[playground/src/EXU.scala:35:47]
      3'b010:
        casez_tmp_0 = io_rs2v;	// @[playground/src/EXU.scala:35:47]
      3'b011:
        casez_tmp_0 = io_pc;	// @[playground/src/EXU.scala:35:47]
      3'b100:
        casez_tmp_0 = io_imm;	// @[playground/src/EXU.scala:35:47]
      3'b101:
        casez_tmp_0 = {58'h0, io_inst[25:20]};	// @[playground/src/EXU.scala:26:22, :35:47]
      3'b110:
        casez_tmp_0 = io_csrrv;	// @[playground/src/EXU.scala:35:47]
      default:
        casez_tmp_0 = 64'h0;	// @[playground/src/EXU.scala:27:47, :35:47]
    endcase	// @[playground/src/EXU.scala:35:47]
  end // always_comb
  wire [64:0]  _data_res_T_34 =
    $signed({casez_tmp[63], casez_tmp}) / $signed({casez_tmp_0[63], casez_tmp_0});	// @[playground/src/EXU.scala:27:47, :35:47, :48:32, :70:40]
  wire [63:0]  _GEN = casez_tmp * casez_tmp_0;	// @[playground/src/EXU.scala:27:47, :35:47, :47:24]
  wire [63:0]  _GEN_0 = {58'h0, casez_tmp_0[5:0]};	// @[playground/src/EXU.scala:35:47, :58:{41,50}]
  wire [31:0]  _GEN_1 = {27'h0, casez_tmp_0[4:0]};	// @[playground/src/EXU.scala:35:47, :73:{66,75}]
  wire [126:0] _data_res_T_16 = {63'h0, casez_tmp} << casez_tmp_0[5:0];	// @[playground/src/EXU.scala:27:47, :35:47, :58:50, :62:33]
  always_comb begin	// @[playground/src/EXU.scala:53:48]
    casez (io_alu_op)	// @[playground/src/EXU.scala:53:48]
      5'b00000:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      5'b00001:
        casez_tmp_1 = casez_tmp + casez_tmp_0;	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :55:33]
      5'b00010:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      5'b00011:
        casez_tmp_1 = io_pc + 64'h4;	// @[playground/src/EXU.scala:46:20, :53:48]
      5'b00100:
        casez_tmp_1 = {63'h0, $signed(casez_tmp) < $signed(casez_tmp_0)};	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :56:44, :62:33]
      5'b00101:
        casez_tmp_1 = {63'h0, casez_tmp < casez_tmp_0};	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :57:37, :62:33]
      5'b00110:
        casez_tmp_1 = $signed($signed(casez_tmp) >>> _GEN_0);	// @[playground/src/EXU.scala:27:47, :53:48, :58:41]
      5'b00111:
        casez_tmp_1 = casez_tmp >> _GEN_0;	// @[playground/src/EXU.scala:27:47, :53:48, :58:41, :63:33]
      5'b01000:
        casez_tmp_1 = _data_res_T_16[63:0];	// @[playground/src/EXU.scala:53:48, :62:33]
      5'b01001:
        casez_tmp_1 = casez_tmp & casez_tmp_0;	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :59:33]
      5'b01010:
        casez_tmp_1 = casez_tmp | casez_tmp_0;	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :60:33]
      5'b01011:
        casez_tmp_1 = casez_tmp ^ casez_tmp_0;	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :61:33]
      5'b01100:
        casez_tmp_1 = casez_tmp - casez_tmp_0;	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :65:32]
      5'b01101:
        casez_tmp_1 = _GEN;	// @[playground/src/EXU.scala:47:24, :53:48]
      5'b01110:
        casez_tmp_1 = {{32{_GEN[63]}}, _GEN[63:32]};	// @[playground/src/EXU.scala:47:24, :48:47, :53:48, :67:{34,52}]
      5'b01111:
        casez_tmp_1 = _data_res_T_34[63:0];	// @[playground/src/EXU.scala:53:48, :70:40]
      5'b10000:
        casez_tmp_1 = casez_tmp / casez_tmp_0;	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :69:32]
      5'b10001:
        casez_tmp_1 = casez_tmp % casez_tmp_0;	// @[playground/src/EXU.scala:27:47, :35:47, :53:48, :72:33]
      5'b10010:
        casez_tmp_1 = $signed(casez_tmp) % $signed(casez_tmp_0);	// @[playground/src/EXU.scala:27:47, :35:47, :50:32, :53:48]
      5'b10011:
        casez_tmp_1 = {{32{_GEN[63]}}, _GEN[63:32]};	// @[playground/src/EXU.scala:47:24, :49:26, :53:48, :68:{34,53}]
      5'b10100:
        casez_tmp_1 = {32'h0, $signed($signed(casez_tmp[31:0]) >>> _GEN_1)};	// @[playground/src/EXU.scala:27:47, :51:25, :53:48, :67:34, :73:66]
      5'b10101:
        casez_tmp_1 = {32'h0, casez_tmp[31:0] >> _GEN_1};	// @[playground/src/EXU.scala:27:47, :51:25, :53:48, :67:34, :73:66, :74:59]
      5'b10110:
        casez_tmp_1 = {32'h0, $signed(casez_tmp[31:0]) % $signed(casez_tmp_0[31:0])};	// @[playground/src/EXU.scala:27:47, :35:47, :51:{25,40,48}, :53:48, :67:34]
      5'b10111:
        casez_tmp_1 = {32'h0, casez_tmp[31:0] % casez_tmp_0[31:0]};	// @[playground/src/EXU.scala:27:47, :35:47, :51:{25,48}, :52:34, :53:48, :67:34]
      5'b11000:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      5'b11001:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      5'b11010:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      5'b11011:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      5'b11100:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      5'b11101:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      5'b11110:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
      default:
        casez_tmp_1 = 64'h0;	// @[playground/src/EXU.scala:27:47, :53:48]
    endcase	// @[playground/src/EXU.scala:53:48]
  end // always_comb
  assign io_res = io_isword ? {{32{casez_tmp_1[31]}}, casez_tmp_1[31:0]} : casez_tmp_1;	// @[<stdin>:2593:10, playground/src/EXU.scala:53:48, :79:{22,27,45,60}, :80:16]
endmodule

