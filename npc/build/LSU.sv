// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module LSU(	// @[<stdin>:3182:10]
  input         clock,	// @[<stdin>:3183:11]
                reset,	// @[<stdin>:3184:11]
                io_in_valid,	// @[playground/src/LSU.scala:64:14]
  input  [31:0] io_in_bits_inst,	// @[playground/src/LSU.scala:64:14]
  input  [63:0] io_in_bits_pc,	// @[playground/src/LSU.scala:64:14]
                io_in_bits_alures,	// @[playground/src/LSU.scala:64:14]
  input         io_in_bits_memvalid,	// @[playground/src/LSU.scala:64:14]
                io_in_bits_wen,	// @[playground/src/LSU.scala:64:14]
  input  [63:0] io_in_bits_wmask,	// @[playground/src/LSU.scala:64:14]
  input  [2:0]  io_in_bits_wsext,	// @[playground/src/LSU.scala:64:14]
  input  [31:0] io_in_bits_raddr,	// @[playground/src/LSU.scala:64:14]
                io_in_bits_waddr,	// @[playground/src/LSU.scala:64:14]
  input  [63:0] io_in_bits_wdata,	// @[playground/src/LSU.scala:64:14]
  input         io_in_bits_rden,	// @[playground/src/LSU.scala:64:14]
  input  [4:0]  io_in_bits_rd,	// @[playground/src/LSU.scala:64:14]
  input  [11:0] io_in_bits_csridx,	// @[playground/src/LSU.scala:64:14]
  input  [63:0] io_in_bits_csrwv,	// @[playground/src/LSU.scala:64:14]
  input         io_in_bits_csr_en,	// @[playground/src/LSU.scala:64:14]
                io_axi4_to_arbiter_arready,	// @[playground/src/LSU.scala:64:14]
  input  [63:0] io_axi4_to_arbiter_rdata,	// @[playground/src/LSU.scala:64:14]
  input  [1:0]  io_axi4_to_arbiter_rresp,	// @[playground/src/LSU.scala:64:14]
  input         io_axi4_to_arbiter_rvalid,	// @[playground/src/LSU.scala:64:14]
                io_axi4_to_arbiter_awready,	// @[playground/src/LSU.scala:64:14]
                io_axi4_to_arbiter_wready,	// @[playground/src/LSU.scala:64:14]
  input  [1:0]  io_axi4_to_arbiter_bresp,	// @[playground/src/LSU.scala:64:14]
  input         io_axi4_to_arbiter_bvalid,	// @[playground/src/LSU.scala:64:14]
                io_bus_ac,	// @[playground/src/LSU.scala:64:14]
  output        io_in_ready,	// @[playground/src/LSU.scala:64:14]
                io_out_valid,	// @[playground/src/LSU.scala:64:14]
  output [31:0] io_out_bits_inst,	// @[playground/src/LSU.scala:64:14]
  output [63:0] io_out_bits_pc,	// @[playground/src/LSU.scala:64:14]
                io_out_bits_alures,	// @[playground/src/LSU.scala:64:14]
  output        io_out_bits_memvalid,	// @[playground/src/LSU.scala:64:14]
                io_out_bits_rden,	// @[playground/src/LSU.scala:64:14]
  output [4:0]  io_out_bits_rd,	// @[playground/src/LSU.scala:64:14]
  output [11:0] io_out_bits_csridx,	// @[playground/src/LSU.scala:64:14]
  output [63:0] io_out_bits_csrwv,	// @[playground/src/LSU.scala:64:14]
  output        io_out_bits_csr_en,	// @[playground/src/LSU.scala:64:14]
  output [2:0]  io_out_bits_memsext,	// @[playground/src/LSU.scala:64:14]
  output [63:0] io_out_bits_rdata,	// @[playground/src/LSU.scala:64:14]
  output [31:0] io_axi4_to_arbiter_araddr,	// @[playground/src/LSU.scala:64:14]
  output        io_axi4_to_arbiter_arvalid,	// @[playground/src/LSU.scala:64:14]
                io_axi4_to_arbiter_rready,	// @[playground/src/LSU.scala:64:14]
  output [31:0] io_axi4_to_arbiter_awaddr,	// @[playground/src/LSU.scala:64:14]
  output        io_axi4_to_arbiter_awvalid,	// @[playground/src/LSU.scala:64:14]
  output [63:0] io_axi4_to_arbiter_wdata,	// @[playground/src/LSU.scala:64:14]
  output [7:0]  io_axi4_to_arbiter_wstrb,	// @[playground/src/LSU.scala:64:14]
  output        io_axi4_to_arbiter_wvalid,	// @[playground/src/LSU.scala:64:14]
                io_axi4_to_arbiter_bready,	// @[playground/src/LSU.scala:64:14]
                io_bus_reqr,	// @[playground/src/LSU.scala:64:14]
                io_bus_reqw	// @[playground/src/LSU.scala:64:14]
);

  wire         _dcache_io_io_raddr_ready;	// @[playground/src/LSU.scala:196:22]
  wire [63:0]  _dcache_io_io_rdata;	// @[playground/src/LSU.scala:196:22]
  wire         _dcache_io_io_rdata_valid;	// @[playground/src/LSU.scala:196:22]
  wire         _dcache_io_io_waddr_ready;	// @[playground/src/LSU.scala:196:22]
  wire         _dcache_io_io_wdata_ready;	// @[playground/src/LSU.scala:196:22]
  wire         _dcache_io_io_bvalid;	// @[playground/src/LSU.scala:196:22]
  reg  [31:0]  readAddr;	// @[playground/src/LSU.scala:85:29]
  reg  [63:0]  readData;	// @[playground/src/LSU.scala:86:29]
  reg  [31:0]  writeAddr;	// @[playground/src/LSU.scala:88:29]
  reg  [63:0]  writeData;	// @[playground/src/LSU.scala:89:29]
  reg  [7:0]   writeStrb;	// @[playground/src/LSU.scala:90:29]
  reg  [1:0]   r_state;	// @[playground/src/LSU.scala:191:24]
  reg  [1:0]   w_state;	// @[playground/src/LSU.scala:194:24]
  wire         _dcache_io_io_raddr_valid_T = r_state == 2'h1;	// @[playground/src/LSU.scala:191:24, :200:40]
  wire         _dcache_io_io_rdata_ready_T = r_state == 2'h2;	// @[playground/src/LSU.scala:191:24, :203:40]
  wire         _dcache_io_io_wdata_valid_T = w_state == 2'h1;	// @[playground/src/LSU.scala:194:24, :200:40, :205:40]
  wire         _dcache_io_io_bready_T = w_state == 2'h2;	// @[playground/src/LSU.scala:194:24, :203:40, :210:40]
  reg  [2:0]   r_offset_reg;	// @[playground/src/LSU.scala:215:29]
  wire         _io_out_valid_T = r_state == 2'h0;	// @[playground/src/LSU.scala:191:24, :219:19]
  wire         _GEN = io_in_valid & io_in_bits_memvalid;	// @[playground/src/LSU.scala:221:25]
  wire         _GEN_0 = _GEN & ~io_in_bits_wen;	// @[playground/src/LSU.scala:221:{25,48,51}]
  wire         _io_out_valid_T_1 = w_state == 2'h0;	// @[playground/src/LSU.scala:191:24, :194:24, :248:19]
  wire         _GEN_1 = _GEN & io_in_bits_wen;	// @[playground/src/LSU.scala:221:25, :250:48]
  reg  [31:0]  instreg;	// @[playground/src/LSU.scala:282:24]
  reg  [63:0]  pcreg;	// @[playground/src/LSU.scala:283:22]
  reg          memvalidreg;	// @[playground/src/LSU.scala:284:28]
  reg  [63:0]  aluresreg;	// @[playground/src/LSU.scala:285:26]
  reg          rdenreg;	// @[playground/src/LSU.scala:286:24]
  reg  [4:0]   rdreg;	// @[playground/src/LSU.scala:287:22]
  reg  [2:0]   memsextreg;	// @[playground/src/LSU.scala:288:27]
  reg  [11:0]  csridxreg;	// @[playground/src/LSU.scala:289:26]
  reg  [63:0]  csrwvreg;	// @[playground/src/LSU.scala:291:25]
  reg          csrenreg;	// @[playground/src/LSU.scala:292:25]
  wire         w_is_sram = io_in_bits_waddr[31] & io_in_bits_waddr < 32'h88000000;	// @[playground/src/LSU.scala:93:68, :95:{33,48,68}]
  wire [190:0] _writeData_T_2 =
    {127'h0, io_in_bits_wdata} << {185'h0, io_in_bits_waddr[2:0], 3'h0};	// @[playground/src/LSU.scala:87:29, :251:58, :254:54]
  wire [70:0]  _writeStrb_T_1 = {7'h0, io_in_bits_wmask} << io_in_bits_waddr[2:0];	// @[playground/src/LSU.scala:251:58, :255:54]
  wire         r_is_sram = io_in_bits_raddr[31] & io_in_bits_raddr < 32'h88000000;	// @[playground/src/LSU.scala:93:{33,48,68}]
  wire         _GEN_2 = _dcache_io_io_rdata_ready_T & _dcache_io_io_rdata_valid;	// @[playground/src/LSU.scala:86:29, :196:22, :203:40, :219:19, :239:38, :241:19]
  always @(posedge clock) begin	// @[<stdin>:3183:11]
    if (reset) begin	// @[<stdin>:3183:11]
      readAddr <= 32'h0;	// @[playground/src/LSU.scala:85:29]
      readData <= 64'h0;	// @[playground/src/LSU.scala:86:29]
      writeAddr <= 32'h0;	// @[playground/src/LSU.scala:85:29, :88:29]
      writeData <= 64'h0;	// @[playground/src/LSU.scala:86:29, :89:29]
      writeStrb <= 8'h0;	// @[playground/src/LSU.scala:90:29]
      r_state <= 2'h0;	// @[playground/src/LSU.scala:191:24]
      w_state <= 2'h0;	// @[playground/src/LSU.scala:191:24, :194:24]
      r_offset_reg <= 3'h0;	// @[playground/src/LSU.scala:87:29, :215:29]
      instreg <= 32'h0;	// @[playground/src/LSU.scala:85:29, :282:24]
      pcreg <= 64'h0;	// @[playground/src/LSU.scala:86:29, :283:22]
      memvalidreg <= 1'h0;	// @[playground/src/LSU.scala:79:21, :284:28]
      aluresreg <= 64'h0;	// @[playground/src/LSU.scala:86:29, :285:26]
      rdenreg <= 1'h0;	// @[playground/src/LSU.scala:79:21, :286:24]
      rdreg <= 5'h0;	// @[<stdin>:3182:10, playground/src/LSU.scala:287:22]
      memsextreg <= 3'h6;	// @[playground/src/LSU.scala:288:27]
      csridxreg <= 12'h0;	// @[playground/src/LSU.scala:289:26]
      csrwvreg <= 64'h0;	// @[playground/src/LSU.scala:86:29, :291:25]
      csrenreg <= 1'h0;	// @[playground/src/LSU.scala:79:21, :292:25]
    end
    else begin	// @[<stdin>:3183:11]
      if (_io_out_valid_T & _GEN_0) begin	// @[playground/src/LSU.scala:85:29, :219:19, :221:{48,68}, :223:19]
        if (r_is_sram) begin	// @[playground/src/LSU.scala:93:48]
          readAddr <= {io_in_bits_raddr[31:3], 3'h0};	// @[playground/src/LSU.scala:85:29, :87:29, :223:{40,57}]
          r_offset_reg <= io_in_bits_raddr[2:0];	// @[playground/src/LSU.scala:215:29, :222:58]
        end
        else begin	// @[playground/src/LSU.scala:93:48]
          readAddr <= io_in_bits_raddr;	// @[playground/src/LSU.scala:85:29]
          r_offset_reg <= 3'h0;	// @[playground/src/LSU.scala:87:29, :215:29]
        end
      end
      if (_io_out_valid_T | _dcache_io_io_raddr_valid_T | ~_GEN_2) begin	// @[playground/src/LSU.scala:86:29, :200:40, :219:19, :239:38, :241:19]
      end
      else if (r_is_sram)	// @[playground/src/LSU.scala:93:48]
        readData <= _dcache_io_io_rdata >> {58'h0, r_offset_reg, 3'h0};	// @[playground/src/LSU.scala:86:29, :87:29, :196:22, :215:29, :241:56]
      else	// @[playground/src/LSU.scala:93:48]
        readData <= _dcache_io_io_rdata;	// @[playground/src/LSU.scala:86:29, :196:22]
      if (_io_out_valid_T_1 & _GEN_1) begin	// @[playground/src/LSU.scala:88:29, :248:19, :250:{48,67}, :253:19]
        if (w_is_sram)	// @[playground/src/LSU.scala:95:48]
          writeAddr <= {io_in_bits_waddr[31:3], 3'h0};	// @[playground/src/LSU.scala:87:29, :88:29, :253:{40,57}]
        else	// @[playground/src/LSU.scala:95:48]
          writeAddr <= io_in_bits_waddr;	// @[playground/src/LSU.scala:88:29]
        writeData <= w_is_sram ? _writeData_T_2[63:0] : io_in_bits_wdata;	// @[playground/src/LSU.scala:89:29, :95:48, :254:{25,54}]
        writeStrb <= w_is_sram ? _writeStrb_T_1[7:0] : io_in_bits_wmask[7:0];	// @[playground/src/LSU.scala:90:29, :95:48, :255:{25,54}]
      end
      if (_io_out_valid_T) begin	// @[playground/src/LSU.scala:219:19]
        if (_GEN_0)	// @[playground/src/LSU.scala:221:48]
          r_state <= 2'h1;	// @[playground/src/LSU.scala:191:24, :200:40]
      end
      else if (_dcache_io_io_raddr_valid_T) begin	// @[playground/src/LSU.scala:200:40]
        if (_dcache_io_io_raddr_ready)	// @[playground/src/LSU.scala:196:22]
          r_state <= 2'h2;	// @[playground/src/LSU.scala:191:24, :203:40]
      end
      else if (_GEN_2)	// @[playground/src/LSU.scala:86:29, :219:19, :239:38, :241:19]
        r_state <= 2'h0;	// @[playground/src/LSU.scala:191:24]
      if (_io_out_valid_T_1) begin	// @[playground/src/LSU.scala:248:19]
        if (_GEN_1)	// @[playground/src/LSU.scala:250:48]
          w_state <= 2'h1;	// @[playground/src/LSU.scala:194:24, :200:40]
      end
      else if (_dcache_io_io_wdata_valid_T) begin	// @[playground/src/LSU.scala:205:40]
        if (_dcache_io_io_waddr_ready & _dcache_io_io_wdata_ready)	// @[playground/src/LSU.scala:196:22, :263:38]
          w_state <= 2'h2;	// @[playground/src/LSU.scala:194:24, :203:40]
      end
      else if (_dcache_io_io_bready_T & _dcache_io_io_bvalid)	// @[playground/src/LSU.scala:194:24, :196:22, :210:40, :248:19, :271:34, :272:21]
        w_state <= 2'h0;	// @[playground/src/LSU.scala:191:24, :194:24]
      if (io_in_valid & _io_out_valid_T & _io_out_valid_T_1) begin	// @[playground/src/LSU.scala:219:19, :248:19, :317:43]
        instreg <= io_in_bits_inst;	// @[playground/src/LSU.scala:282:24]
        pcreg <= io_in_bits_pc;	// @[playground/src/LSU.scala:283:22]
        memvalidreg <= io_in_bits_memvalid;	// @[playground/src/LSU.scala:284:28]
        aluresreg <= io_in_bits_alures;	// @[playground/src/LSU.scala:285:26]
        rdenreg <= io_in_bits_rden;	// @[playground/src/LSU.scala:286:24]
        rdreg <= io_in_bits_rd;	// @[playground/src/LSU.scala:287:22]
        memsextreg <= io_in_bits_wsext;	// @[playground/src/LSU.scala:288:27]
        csridxreg <= io_in_bits_csridx;	// @[playground/src/LSU.scala:289:26]
        csrwvreg <= io_in_bits_csrwv;	// @[playground/src/LSU.scala:291:25]
        csrenreg <= io_in_bits_csr_en;	// @[playground/src/LSU.scala:292:25]
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:3182:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:3182:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:3182:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:16];	// @[<stdin>:3182:10]
    initial begin	// @[<stdin>:3182:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:3182:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:3182:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:3182:10]
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;	// @[<stdin>:3182:10]
        end	// @[<stdin>:3182:10]
        readAddr = {_RANDOM[5'h0][31:2], _RANDOM[5'h1][1:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:85:29]
        readData = {_RANDOM[5'h1][31:2], _RANDOM[5'h2], _RANDOM[5'h3][1:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:85:29, :86:29]
        writeAddr = {_RANDOM[5'h3][31:5], _RANDOM[5'h4][4:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:86:29, :88:29]
        writeData = {_RANDOM[5'h4][31:5], _RANDOM[5'h5], _RANDOM[5'h6][4:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:88:29, :89:29]
        writeStrb = _RANDOM[5'h6][12:5];	// @[<stdin>:3182:10, playground/src/LSU.scala:89:29, :90:29]
        r_state = _RANDOM[5'h6][17:16];	// @[<stdin>:3182:10, playground/src/LSU.scala:89:29, :191:24]
        w_state = _RANDOM[5'h6][22:21];	// @[<stdin>:3182:10, playground/src/LSU.scala:89:29, :194:24]
        r_offset_reg = _RANDOM[5'h6][25:23];	// @[<stdin>:3182:10, playground/src/LSU.scala:89:29, :215:29]
        instreg = {_RANDOM[5'h6][31:29], _RANDOM[5'h7][28:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:89:29, :282:24]
        pcreg = {_RANDOM[5'h7][31:29], _RANDOM[5'h8], _RANDOM[5'h9][28:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:282:24, :283:22]
        memvalidreg = _RANDOM[5'h9][29];	// @[<stdin>:3182:10, playground/src/LSU.scala:283:22, :284:28]
        aluresreg = {_RANDOM[5'h9][31:30], _RANDOM[5'hA], _RANDOM[5'hB][29:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:283:22, :285:26]
        rdenreg = _RANDOM[5'hB][30];	// @[<stdin>:3182:10, playground/src/LSU.scala:285:26, :286:24]
        rdreg = {_RANDOM[5'hB][31], _RANDOM[5'hC][3:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:285:26, :287:22]
        memsextreg = _RANDOM[5'hC][6:4];	// @[<stdin>:3182:10, playground/src/LSU.scala:287:22, :288:27]
        csridxreg = _RANDOM[5'hC][18:7];	// @[<stdin>:3182:10, playground/src/LSU.scala:287:22, :289:26]
        csrwvreg = {_RANDOM[5'hE][31:19], _RANDOM[5'hF], _RANDOM[5'h10][18:0]};	// @[<stdin>:3182:10, playground/src/LSU.scala:291:25]
        csrenreg = _RANDOM[5'h10][19];	// @[<stdin>:3182:10, playground/src/LSU.scala:291:25, :292:25]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:3182:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:3182:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DCache dcache (	// @[playground/src/LSU.scala:196:22]
    .clock             (clock),
    .reset             (reset),
    .io_io_raddr       ({32'h0, readAddr}),	// @[playground/src/LSU.scala:85:29, :201:29]
    .io_io_raddr_valid (_dcache_io_io_raddr_valid_T),	// @[playground/src/LSU.scala:200:40]
    .io_io_rdata_ready (_dcache_io_io_rdata_ready_T),	// @[playground/src/LSU.scala:203:40]
    .io_io_waddr       ({32'h0, writeAddr}),	// @[playground/src/LSU.scala:85:29, :88:29, :207:29]
    .io_io_waddr_valid (_dcache_io_io_wdata_valid_T),	// @[playground/src/LSU.scala:205:40]
    .io_io_wdata       (writeData),	// @[playground/src/LSU.scala:89:29]
    .io_io_wstrb       (writeStrb),	// @[playground/src/LSU.scala:90:29]
    .io_io_bready      (_dcache_io_io_bready_T),	// @[playground/src/LSU.scala:210:40]
    .io_axi4_arready   (io_axi4_to_arbiter_arready),
    .io_axi4_rdata     (io_axi4_to_arbiter_rdata),
    .io_axi4_rresp     (io_axi4_to_arbiter_rresp),
    .io_axi4_rvalid    (io_axi4_to_arbiter_rvalid),
    .io_axi4_awready   (io_axi4_to_arbiter_awready),
    .io_axi4_wready    (io_axi4_to_arbiter_wready),
    .io_axi4_bresp     (io_axi4_to_arbiter_bresp),
    .io_axi4_bvalid    (io_axi4_to_arbiter_bvalid),
    .io_bus_ac         (io_bus_ac),
    .io_io_raddr_ready (_dcache_io_io_raddr_ready),
    .io_io_rdata       (_dcache_io_io_rdata),
    .io_io_rdata_valid (_dcache_io_io_rdata_valid),
    .io_io_waddr_ready (_dcache_io_io_waddr_ready),
    .io_io_wdata_ready (_dcache_io_io_wdata_ready),
    .io_io_bvalid      (_dcache_io_io_bvalid),
    .io_axi4_araddr    (io_axi4_to_arbiter_araddr),
    .io_axi4_arvalid   (io_axi4_to_arbiter_arvalid),
    .io_axi4_rready    (io_axi4_to_arbiter_rready),
    .io_axi4_awaddr    (io_axi4_to_arbiter_awaddr),
    .io_axi4_awvalid   (io_axi4_to_arbiter_awvalid),
    .io_axi4_wdata     (io_axi4_to_arbiter_wdata),
    .io_axi4_wstrb     (io_axi4_to_arbiter_wstrb),
    .io_axi4_wvalid    (io_axi4_to_arbiter_wvalid),
    .io_axi4_bready    (io_axi4_to_arbiter_bready),
    .io_bus_reqr       (io_bus_reqr),
    .io_bus_reqw       (io_bus_reqw)
  );
  assign io_in_ready =
    (_io_out_valid_T
       ? ~_GEN_0
       : ~_dcache_io_io_raddr_valid_T
         & (~_dcache_io_io_rdata_ready_T | _dcache_io_io_rdata_valid))
    & (_io_out_valid_T_1
         ? ~_GEN_1
         : ~_dcache_io_io_wdata_valid_T
           & (~_dcache_io_io_bready_T | _dcache_io_io_bvalid));	// @[<stdin>:3182:10, playground/src/LSU.scala:79:21, :83:30, :84:30, :196:22, :200:40, :203:40, :205:40, :210:40, :219:19, :221:{48,68}, :225:19, :231:14, :239:38, :248:19, :250:{48,67}, :257:19, :262:14, :271:34, :280:25]
  assign io_out_valid = _io_out_valid_T & _io_out_valid_T_1;	// @[<stdin>:3182:10, playground/src/LSU.scala:219:19, :248:19, :306:38]
  assign io_out_bits_inst = instreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:282:24]
  assign io_out_bits_pc = pcreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:283:22]
  assign io_out_bits_alures = aluresreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:285:26]
  assign io_out_bits_memvalid = memvalidreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:284:28]
  assign io_out_bits_rden = rdenreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:286:24]
  assign io_out_bits_rd = rdreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:287:22]
  assign io_out_bits_csridx = csridxreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:289:26]
  assign io_out_bits_csrwv = csrwvreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:291:25]
  assign io_out_bits_csr_en = csrenreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:292:25]
  assign io_out_bits_memsext = memsextreg;	// @[<stdin>:3182:10, playground/src/LSU.scala:288:27]
  assign io_out_bits_rdata = readData;	// @[<stdin>:3182:10, playground/src/LSU.scala:86:29]
endmodule

