// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IFU(	// @[<stdin>:1420:10]
  input         clock,	// @[<stdin>:1421:11]
                reset,	// @[<stdin>:1422:11]
                io_in_valid,	// @[playground/src/IFU.scala:20:14]
                io_in_bits_stall,	// @[playground/src/IFU.scala:20:14]
                io_in_bits_isdnpc,	// @[playground/src/IFU.scala:20:14]
  input  [63:0] io_in_bits_dnpc,	// @[playground/src/IFU.scala:20:14]
  input         io_out_ready,	// @[playground/src/IFU.scala:20:14]
                io_axi4_to_arbiter_arready,	// @[playground/src/IFU.scala:20:14]
  input  [63:0] io_axi4_to_arbiter_rdata,	// @[playground/src/IFU.scala:20:14]
  input  [1:0]  io_axi4_to_arbiter_rresp,	// @[playground/src/IFU.scala:20:14]
  input         io_axi4_to_arbiter_rvalid,	// @[playground/src/IFU.scala:20:14]
                io_bus_ac,	// @[playground/src/IFU.scala:20:14]
  output        io_out_valid,	// @[playground/src/IFU.scala:20:14]
  output [63:0] io_out_bits_pc,	// @[playground/src/IFU.scala:20:14]
  output [31:0] io_out_bits_inst,	// @[playground/src/IFU.scala:20:14]
                io_axi4_to_arbiter_araddr,	// @[playground/src/IFU.scala:20:14]
  output        io_axi4_to_arbiter_arvalid,	// @[playground/src/IFU.scala:20:14]
                io_axi4_to_arbiter_rready,	// @[playground/src/IFU.scala:20:14]
                io_bus_reqr	// @[playground/src/IFU.scala:20:14]
);

  wire        _icache_io_io_raddr_ready;	// @[playground/src/IFU.scala:42:22]
  wire [31:0] _icache_io_io_rdata;	// @[playground/src/IFU.scala:42:22]
  wire        _icache_io_io_rdata_valid;	// @[playground/src/IFU.scala:42:22]
  reg  [1:0]  state;	// @[playground/src/IFU.scala:31:22]
  reg  [63:0] PC;	// @[playground/src/IFU.scala:37:19]
  reg  [31:0] readAddr;	// @[playground/src/IFU.scala:38:25]
  reg  [31:0] outAddr;	// @[playground/src/IFU.scala:39:24]
  reg  [31:0] outData;	// @[playground/src/IFU.scala:40:24]
  wire        _icache_io_io_raddr_valid_T = state == 2'h1;	// @[playground/src/IFU.scala:31:22, :45:37]
  wire [63:0] _GEN = {32'h0, readAddr};	// @[playground/src/IFU.scala:20:14, :38:25, :42:22, :46:22]
  wire        _icache_io_io_rdata_ready_T = state == 2'h2;	// @[playground/src/IFU.scala:31:22, :47:37]
  reg  [63:0] dnpc_reg;	// @[playground/src/IFU.scala:72:25]
  reg         dnpc_valid;	// @[playground/src/IFU.scala:73:27]
  wire        _io_out_valid_T = state == 2'h0;	// @[playground/src/IFU.scala:31:22, :76:16]
  wire        _GEN_0 = io_in_valid & ~reset & ~io_in_bits_stall & io_out_ready;	// @[playground/src/IFU.scala:38:25, :78:{41,52,71}, :80:29, :82:20]
  wire        _GEN_1 = _icache_io_io_raddr_ready & ~io_in_bits_stall;	// @[playground/src/IFU.scala:42:22, :78:52, :88:38]
  wire        _GEN_2 =
    _icache_io_io_rdata_ready_T & _icache_io_io_rdata_valid & ~io_in_bits_stall;	// @[playground/src/IFU.scala:40:24, :42:22, :47:37, :76:16, :78:52, :96:59, :97:17]
  wire        _GEN_3 = io_in_bits_isdnpc & io_in_valid & ~io_in_bits_stall;	// @[playground/src/IFU.scala:78:52, :122:43]
  always @(posedge clock) begin	// @[<stdin>:1421:11]
    if (reset) begin	// @[<stdin>:1421:11]
      state <= 2'h0;	// @[playground/src/IFU.scala:31:22]
      PC <= 64'h80000000;	// @[playground/src/IFU.scala:37:19]
      readAddr <= 32'h0;	// @[playground/src/IFU.scala:20:14, :38:25, :42:22]
      outAddr <= 32'h0;	// @[playground/src/IFU.scala:20:14, :39:24, :42:22]
      outData <= 32'h0;	// @[playground/src/IFU.scala:20:14, :40:24, :42:22]
      dnpc_reg <= 64'h0;	// @[playground/src/IFU.scala:20:14, :42:22, :72:25]
      dnpc_valid <= 1'h1;	// @[playground/src/IFU.scala:73:27]
    end
    else begin	// @[<stdin>:1421:11]
      if (_io_out_valid_T) begin	// @[playground/src/IFU.scala:76:16]
        if (_GEN_0)	// @[playground/src/IFU.scala:38:25, :78:71, :80:29, :82:20]
          state <= 2'h1;	// @[playground/src/IFU.scala:31:22, :45:37]
      end
      else if (_icache_io_io_raddr_valid_T) begin	// @[playground/src/IFU.scala:45:37]
        if (_GEN_1)	// @[playground/src/IFU.scala:88:38]
          state <= 2'h2;	// @[playground/src/IFU.scala:31:22, :47:37]
      end
      else if (_GEN_2)	// @[playground/src/IFU.scala:40:24, :76:16, :96:59, :97:17]
        state <= 2'h0;	// @[playground/src/IFU.scala:31:22]
      if (_io_out_valid_T | ~(_icache_io_io_raddr_valid_T & _GEN_1)) begin	// @[playground/src/IFU.scala:37:19, :45:37, :76:16, :88:{38,60}, :91:12]
      end
      else if (dnpc_valid)	// @[playground/src/IFU.scala:73:27]
        PC <= PC + 64'h4;	// @[playground/src/IFU.scala:37:19, :91:34]
      else	// @[playground/src/IFU.scala:73:27]
        PC <= dnpc_reg;	// @[playground/src/IFU.scala:37:19, :72:25]
      if (_io_out_valid_T & _GEN_0)	// @[playground/src/IFU.scala:38:25, :76:16, :78:71, :80:29, :82:20]
        readAddr <= PC[31:0];	// @[playground/src/IFU.scala:37:19, :38:25, :82:20]
      if (_io_out_valid_T | _icache_io_io_raddr_valid_T | ~_GEN_2) begin	// @[playground/src/IFU.scala:40:24, :45:37, :76:16, :96:59, :97:17]
      end
      else begin	// @[playground/src/IFU.scala:40:24, :76:16]
        outAddr <= readAddr;	// @[playground/src/IFU.scala:38:25, :39:24]
        outData <= _icache_io_io_rdata;	// @[playground/src/IFU.scala:40:24, :42:22]
      end
      if (dnpc_valid & _GEN_3)	// @[playground/src/IFU.scala:72:25, :73:27, :121:20, :122:{43,64}, :126:16]
        dnpc_reg <= io_in_bits_dnpc;	// @[playground/src/IFU.scala:72:25]
      if (dnpc_valid)	// @[playground/src/IFU.scala:73:27]
        dnpc_valid <= ~_GEN_3 & dnpc_valid;	// @[playground/src/IFU.scala:73:27, :122:{43,64}, :123:18]
      else	// @[playground/src/IFU.scala:73:27]
        dnpc_valid <= dnpc_reg == {32'h0, outAddr};	// @[playground/src/IFU.scala:20:14, :39:24, :42:22, :72:25, :73:27, :129:28]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:1420:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:1420:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:1420:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:7];	// @[<stdin>:1420:10]
    initial begin	// @[<stdin>:1420:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:1420:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:1420:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:1420:10]
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          _RANDOM[i[2:0]] = `RANDOM;	// @[<stdin>:1420:10]
        end	// @[<stdin>:1420:10]
        state = _RANDOM[3'h0][1:0];	// @[<stdin>:1420:10, playground/src/IFU.scala:31:22]
        PC = {_RANDOM[3'h0][31:2], _RANDOM[3'h1], _RANDOM[3'h2][1:0]};	// @[<stdin>:1420:10, playground/src/IFU.scala:31:22, :37:19]
        readAddr = {_RANDOM[3'h2][31:2], _RANDOM[3'h3][1:0]};	// @[<stdin>:1420:10, playground/src/IFU.scala:37:19, :38:25]
        outAddr = {_RANDOM[3'h3][31:2], _RANDOM[3'h4][1:0]};	// @[<stdin>:1420:10, playground/src/IFU.scala:38:25, :39:24]
        outData = {_RANDOM[3'h4][31:2], _RANDOM[3'h5][1:0]};	// @[<stdin>:1420:10, playground/src/IFU.scala:39:24, :40:24]
        dnpc_reg = {_RANDOM[3'h5][31:4], _RANDOM[3'h6], _RANDOM[3'h7][3:0]};	// @[<stdin>:1420:10, playground/src/IFU.scala:40:24, :72:25]
        dnpc_valid = _RANDOM[3'h7][4];	// @[<stdin>:1420:10, playground/src/IFU.scala:72:25, :73:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:1420:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:1420:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ICache icache (	// @[playground/src/IFU.scala:42:22]
    .clock             (clock),
    .reset             (reset),
    .io_io_raddr       (_GEN),	// @[playground/src/IFU.scala:46:22]
    .io_io_raddr_valid (_icache_io_io_raddr_valid_T),	// @[playground/src/IFU.scala:45:37]
    .io_io_rdata_ready (_icache_io_io_rdata_ready_T),	// @[playground/src/IFU.scala:47:37]
    .io_axi4_arready   (io_axi4_to_arbiter_arready),
    .io_axi4_rdata     (io_axi4_to_arbiter_rdata),
    .io_axi4_rresp     (io_axi4_to_arbiter_rresp),
    .io_axi4_rvalid    (io_axi4_to_arbiter_rvalid),
    .io_bus_ac         (io_bus_ac),
    .io_stall          (io_in_bits_stall),
    .io_io_raddr_ready (_icache_io_io_raddr_ready),
    .io_io_rdata       (_icache_io_io_rdata),
    .io_io_rdata_valid (_icache_io_io_rdata_valid),
    .io_axi4_araddr    (io_axi4_to_arbiter_araddr),
    .io_axi4_arvalid   (io_axi4_to_arbiter_arvalid),
    .io_axi4_rready    (io_axi4_to_arbiter_rready),
    .io_bus_reqr       (io_bus_reqr)
  );
  assign io_out_valid = _io_out_valid_T & dnpc_valid & ~io_in_bits_isdnpc;	// @[<stdin>:1420:10, playground/src/IFU.scala:73:27, :76:16, :132:{50,53}]
  assign io_out_bits_pc = _GEN;	// @[<stdin>:1420:10, playground/src/IFU.scala:46:22]
  assign io_out_bits_inst = outData;	// @[<stdin>:1420:10, playground/src/IFU.scala:40:24]
endmodule

